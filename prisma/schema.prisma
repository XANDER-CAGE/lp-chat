generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "chat", "doctor", "consultation"]
}

model file {
  id         String   @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  bucketName String   @map("bucket_name")
  type       String   @map("type")
  name       String   @map("name")
  size       Int      @map("size")
  message    message?

  isDeleted Boolean @default(false) @map("is_deleted")

  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("file")
  @@schema("chat")
}

model message {
  id               String    @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  content          String?   @map("content")
  fileId           String?   @unique @map("file_id")
  file             file?     @relation(fields: [fileId], references: [id])
  chatId           String    @map("chat_id")
  chat             chat      @relation(fields: [chatId], references: [id])
  repliedMessageId String?   @map("replied_message_id")
  tgMsgId          String?   @map("tg_msg_id")
  authorId         String    @map("author_id")
  author           user      @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  repliedMessage   message?  @relation("messageTomessage", fields: [repliedMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  repliedMessages  message[] @relation("messageTomessage")
  firstname        String?   @map("firstname")
  lastname         String?   @map("lastname")

  isDeleted Boolean   @default(false) @map("is_deleted")
  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("message")
  @@schema("chat")
}

model rejectedChat {
  id         String @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  chatId     String @map("chat_id")
  chat       chat   @relation(fields: [chatId], references: [id])
  operatorId String @map("operator_id")
  operator   user   @relation(fields: [operatorId], references: [id])

  isDeleted Boolean   @default(false) @map("is_deleted")
  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("rejected_chat")
  @@schema("chat")
}

model rating {
  id       String  @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  rate     Int     @map("rate")
  message  String  @map("message")
  chatId   String? @map("chat_id")
  clientId String? @map("client_id")
  chat     chat?   @relation(fields: [chatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  client   user?   @relation(fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  isDeleted Boolean   @default(false) @map("is_deleted")
  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("rating")
  @@schema("chat")
}

model user {
  id               String            @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  approvedAt       DateTime?         @map("approved_at")
  blockedAt        DateTime?         @map("blocked_at")
  shiftStatus      shiftStatus?      @map("shift_status")
  messages         message[]
  telegramId       String?           @unique @map("telegram_id")
  username         String?           @map("username")
  kcUserId         String?           @unique @map("kc_user_id")
  email            String?           @map("email")
  phone            String?           @map("phone")
  ratings          rating[]          @ignore
  shift            shift[]
  userChats        chat[]            @relation("clientChats")
  operatorChats    chat[]            @relation("operatorChats")
  messagesToDelete messageToDelete[]
  rejectedChats    rejectedChat[]

  firstname String? @map("firstname")
  lastname  String? @map("lastname")

  // User and doctor marge user Model (this logic very important)
  userId   String? @unique @map("user_id") @db.VarChar(24)
  doctorId String? @unique @map("doctor_id") @db.VarChar(24)

  isDeleted Boolean   @default(false) @map("is_deleted")
  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("user")
  @@schema("chat")
}

model chat {
  id             String     @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  topicId        String     @map("topic_id")
  topic          topic      @relation(fields: [topicId], references: [id])
  status         chatstatus @map("status")
  clientId       String     @map("client_id")
  client         user       @relation("clientChats", fields: [clientId], references: [id])
  operatorId     String?    @map("operator_id")
  operator       user?      @relation("operatorChats", fields: [operatorId], references: [id])
  consultationId String?    @map("consultation_id")

  messages          message[]
  rating            rating[]
  rejectedOperators rejectedChat[]
  messagesToDelete  messageToDelete[] @ignore

  isDeleted Boolean   @default(false) @map("is_deleted")
  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("chat")
  @@schema("chat")
}

model topic {
  id          String  @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  name        String  @map("name")
  description String? @map("description")
  chats       chat[]

  isDeleted Boolean   @default(false) @map("is_deleted")
  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("topic")
  @@schema("chat")
}

model shift {
  id         String      @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  status     shiftStatus @map("status")
  operatorId String      @map("operator_id")
  operator   user        @relation(fields: [operatorId], references: [id])

  isDeleted Boolean   @default(false) @map("is_deleted")
  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("shift")
  @@schema("chat")
}

model messageToDelete {
  id          String @id @default(dbgenerated("generate_object_id()")) @db.VarChar(24)
  tgMessageId String @map("tg_message_id")
  operatorId  String @map("operator_id")
  operator    user   @relation(fields: [operatorId], references: [id])
  chatId      String @map("chat_id")
  chat        chat   @relation(fields: [chatId], references: [id])

  isDeleted Boolean   @default(false) @map("is_deleted")
  // Timestamps
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz
  // User IDs
  deletedBy String?   @map("deleted_by") @db.VarChar(24)
  createdBy String?   @map("created_by") @db.VarChar(24)
  updatedBy String?   @map("updated_by") @db.VarChar(24)

  @@map("message_to_delete")
  @@schema("chat")
}

enum chatstatus {
  active
  done
  underInvestigation
  init

  @@schema("chat")
}

enum shiftStatus {
  active
  inactive

  @@schema("chat")
}

// Stmtom checker model

model consultation {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  operatorId    String?   @map("operator_id")
  userId        String    @map("user_id")
  createdAt     DateTime? @default(now()) @map("created_at")
  status        Int       @default(0)
  chatId        String?   @unique() @map("chat_id")
  isPayed       Boolean?  @default(false) @map("is_payed")
  isFree        Boolean?  @default(false) @map("is_free")
  transactionId String?   @map("transaction_id") @db.Uuid
  details       Json?     @map("details")
  rank          Int?      @map("rank")
  comment       String?   @map("comment")
  topicId       String?   @map("topic_id")

  @@map("consultations")
  @@schema("consultation")
}
